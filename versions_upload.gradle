6apply plugin: 'maven'


afterEvaluate {
    def upload = tasks.create("uploadMavenVersions", Upload) {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                group = 'upload'
                doFirst {
                    println "doFirst" + getDependsOn()
                    File file = new File(applyVersionModule())
                    getGitApi(file)
                }
            }
        }
    }

    def upload2 = tasks.create("uploadLibraryVersions", Upload) {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                group = 'upload'
                doFirst {
                    println "doFirst" + getDependsOn()
                    File file = new File(applyVersionLib())
                    getGitApi(file)
                }
            }
        }
    }

    def upload3 = tasks.create("uploadBuildConfig", Upload) {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                group = 'upload'
                doFirst {
                    println "doFirst" + getDependsOn()
                    File file = new File(applyBuildConfig())
                    getGitApi(file)
                }
            }
        }
    }
}


def getGitApi(File file) {
    String fileName = file.getName()

    if (!file.exists()) {
        throwError("没有找到本地" + fileName + "文件")
    }

    requestGet(getVersionUrl() + "/contents/" + fileName + "?access_token=" + getToken(),
            { code, response ->
                if (code == 200) {
                    String sha = response.split("\"sha\":")[1].split("\"")[1];
                    log("upload_versions sha ", sha)

                    String a = readFile(file)
                    log("upload_versions readFile ", a)

                    postVersions(a, sha, file)
                } else {
                    throwError(response)
                }
            }
    )
}


def postVersions(String content, final String sha, File file) {
    String fileName = file.getName()

    final String pushEncodeContent = base64Encode(content).replace("\n", "\\n");

    String conmitter = ""
    String userName = getGitUserName()
    String email = getGitUserEmail()
    if (!userName.isEmpty() && !email.isEmpty()) {
        conmitter = "," + "\"committer\": {" + "\"name\":\"" + userName + "\"," + "\"email\":\"" + email + "\"" + "}"
    }

    String body = "{\"message\":\"update\",\"sha\":\"" + sha + "\",\"content\":\"" + pushEncodeContent + "\"" + conmitter + "}"

    requestMethod("PUT", getVersionUrl() + "/contents/" + fileName + "?access_token=" + getToken(), body,
            { code, response ->
                if (code == 200) {
                    log("upload_versions success", code)
                    refreshFile(file)
                } else {
                    throwError(response)
                }
            }
    )
}

ext.refreshFileCount = 0

def refreshFile(File file) {
    String fileName = file.getName()

    requestGet(getVersionUrl() + "/contents/" + fileName + "?access_token=" + getToken(),
            { code, response ->
                if (code == 200) {
                    String encodeContent = response.split("\"content\":")[1].split("\"")[1];
                    String content = base64Decode(encodeContent)
                    log("upload_versions refresh local seccess", content)

                    saveFile(file, content)

                    log("upload_versions refresh local seccess", code)

                } else {
                    if (refreshFileCount++ < 3) {
                        refreshFile()
                    } else {
                        throwError(response)
                    }
                }
            }
    )


}
















