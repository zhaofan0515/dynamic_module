1apply from: getRootDir().toString() + "\\gradle\\" + 'utils.gradle'
apply from: getRootDir().toString() + "\\" + 'settings_module.gradle'
apply from: applyVersionModule()


def configurationsMap = new HashMap()

gradle.allprojects({ project ->
    configurations {
        configurationsMap.put(project.name, configurations)
    }

    repositories {
        maven { url uri(getMavenUrl()) }
    }

    //统一版本号
    project.configurations.all {
        resolutionStrategy.eachDependency { details ->

            if (remote_module.containsKey(details.requested.name)) {
                details.useTarget(remote_module[details.requested.name])
            }

            if (details.requested.group == 'com.android.support'
                    && !details.requested.name.contains('multidex')) {
                details.useVersion versions.support
            }
        }
    }
})




gradle.ext.compile = { project, name ->
    applySetting()
    def handler = project.dependencies


    println "  setting_module: " + setting_module
    log("======================== dependencies ", name)

    if (setting_module.isEmpty()) {
        return
    }
    if (!setting_module.containsKey(name)) {
        return
    }

    def ver = setting_module[name]
    if (ver.isEmpty()) {
        handler.api project.project(":$name")
        println "dependencies api project :$name\n"
    } else if (ver == 'remote') {
        gradle.ext.compileRemote(project, name)
        println "dependencies api remote :$name\n"
    } else if (ver.startsWith(":")) {
        handler.api project.project(":$name")
        println "dependencies api project :$name\n"

        String[] a = ver.replace(":", "").trim().split(",")
        for (String i : a) {
            handler.api project.project(":$i")
            println "dependencies api project :$i\n"
            /*      if (setting_module.containsKey(i) && !setting_module.get(i)) {
                      handler.api project.project(":$name")
                      println "dependencies api project :$name\n"
                      break
                  }*/
        }
    } else if (ver == 'false') {
        //don't compile
    } else {
        //don't compile
    }
}


gradle.ext.compileRemote = { project, name ->
    def handler = project.dependencies
    println "99999999999999999999999999999999999999999 dependencies remote " + //project.android.applicationVariants+" "+
            project + " \n\n" + rootProject.subprojects[0].android.applicationVariants[0].name

    rootProject.subprojects[0].android.applicationVariants.all { v ->
        String flavorShort = ""
        def flavor = v.name //getCurrentFlavor(project.name, "")
        def methodName = v.name + "Api"
        def it = configurationsMap.entrySet().iterator()
        while (it.hasNext()) {
            it.next().value.maybeCreate(methodName)
        }

        def remote_lib = remote_module[name + "-" + flavor]
        if (!remote_lib) {
            def env = ""
            if (flavor.toString().endsWith("PreRelease")) {
                env = "preRelease"
                flavorShort = flavor.toString().replace("PreRelease", "")
            } else if (flavor.toString().endsWith("Release")) {
                env = "release"
                flavorShort = flavor.toString().replace("Release", "")
            } else if (flavor.toString().endsWith("Debug")) {
                env = "debug"
                flavorShort = flavor.toString().replace("Debug", "")
            }

            remote_lib = remote_module[name + "-" + env]
            if (!remote_lib) {
                remote_lib = remote_module[name]
            }
        }

        if (!remote_lib) {
            remote_lib = remote_module[name + "-" + flavorShort + "Release"]
        }

        if (!remote_lib) {
            remote_lib = remote_module[name + "-" + flavorShort]
        }

        if (!remote_lib) {
            remote_lib = remote_module[name + "Release"]
        }

        if (!remote_lib) {
            remote_lib = remote_module[name]
        }

        if (remote_lib) {
            println "99999999999999999999999999999999 dependencies remote " + methodName + " " + remote_lib
            handler.add(methodName, remote_lib)
        }
    }

}



ext.moduleSwitch = { module ->
    applySetting()
    println "77777777777777777777777 dependencies selectModule " + setting_module
    def settingInclude = new HashMap<>()

    if(setting_module.isEmpty()){
        return settingInclude
    }
    def it = setting_module.entrySet().iterator()

    println "77777777777777777777777 dependencies entrySet " + it

    while (it.hasNext()) {
        def ent = it.next()
        if (ent.getValue().isEmpty()) {
            settingInclude.put(ent.getKey(), "")
        } else if (ent.getValue().startsWith(":")) {
            String[] a = ent.getValue().replace(":", "").trim().split(",")
            settingInclude.put(ent.getKey(), "")

            for (String i : a) {
                println "77777777777777777777777 dependencies containsKey " + i + " " + setting_module
                settingInclude.put(i, "")

                /*     if (setting_module.containsKey(i)) {
                         if (!setting_module.get(i)) {
                             println "77777777777777777777777 dependencies putputput " + ent.getKey()
                             settingInclude.put(ent.getKey(), "")
                         } else {

                         }
                         break
                     }*/
            }
        }
    }
    println "77777777777777777777777 dependencies settingMap " + settingInclude

    return settingInclude

}

ext.map = { String str ->
    if (str.startsWith(":")) {
        String[] a = str.replace(":", "").trim().split(",")

        for (String i : a) {
            println "77777777777777777777777 dependencies containsKey " + i + " " + setting_module
            if (setting_module.containsKey(i)) {
                if (!setting_module.get(i)) {
                    println "77777777777777777777777 dependencies putputput " + ent.getKey()
                    settingInclude.put(ent.getKey(), "")
                } else {

                }
                break
            }
        }
    }

}

ext.applySetting = {
    if (!isDevelopSetting()) {
        apply from: getRootDir().toString() + "\\" + 'private_settings.gradle'
    }
}


ext.isDevelopSetting = {
    File localFile = new File(getRootDir().toString() + "\\" + 'private_settings.gradle')
    if (!localFile.exists() || isDevelopBranch()) {
        return true
    } else {
        return false
    }
}









